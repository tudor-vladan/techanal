input {
  # File input for application logs
  file {
    path => "/var/log/nginx/*.log"
    type => "nginx"
    start_position => "beginning"
    codec => "json"
  }
  
  # File input for server logs
  file {
    path => "/app/logs/*.log"
    type => "application"
    start_position => "beginning"
    codec => "json"
  }
  
  # Beats input for real-time log shipping
  beats {
    port => 5044
    type => "beats"
  }
}

filter {
  if [type] == "nginx" {
    # Parse Nginx access logs
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }
    }
    
    # Add timestamp
    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
    
    # Add geoip information
    geoip {
      source => "clientip"
    }
    
    # Add user agent parsing
    useragent {
      source => "agent"
      target => "user_agent"
    }
  }
  
  if [type] == "application" {
    # Parse application logs
    json {
      source => "message"
    }
    
    # Add timestamp
    date {
      match => [ "timestamp", "ISO8601" ]
    }
    
    # Add severity level
    if [level] {
      mutate {
        add_field => { "severity" => "%{level}" }
      }
    }
  }
  
  # Common filters for all log types
  mutate {
    add_field => { "environment" => "production" }
    add_field => { "application" => "techanal" }
  }
  
  # Remove sensitive fields
  mutate {
    remove_field => [ "password", "token", "secret" ]
  }
}

output {
  # Console output for debugging
  stdout {
    codec => "rubydebug"
  }
  
  # Elasticsearch output (if available)
  # elasticsearch {
  #   hosts => ["elasticsearch:9200"]
  #   index => "techanal-logs-%{+YYYY.MM.dd}"
  #   document_type => "%{type}"
  # }
  
  # File output for backup
  file {
    path => "/var/log/logstash/techanal-%{type}-%{+YYYY-MM-dd}.log"
    codec => "json"
  }
  
  # HTTP output for custom monitoring
  http {
    url => "http://server:8787/api/v1/logs/ingest"
    http_method => "post"
    format => "json"
    mapping => {
      "timestamp" => "%{@timestamp}"
      "level" => "%{severity}"
      "message" => "%{message}"
      "type" => "%{type}"
      "source" => "%{source}"
    }
  }
}
